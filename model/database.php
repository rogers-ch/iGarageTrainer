<?php

//SELECT SHA1(password) FROM users WHERE username = ?

$home = str_replace("public_html", "", $_SERVER['DOCUMENT_ROOT']);

require_once $home . "config.php";


/**
 * Class Database
 * Contains the methods for reading from and writing to the database for the iGarage Trainer project.
 *
 * @author      Corey Rogers <crogers25@mail.greenriver.edu> and Chunhai Yang <cyang21@mail.greenriver.edu>
 * @version     1.0
 */
class Database
{

    private $_dbh;

    /**
     * Database constructor.
     */
    function __construct()
    {

        //Connect to database with PDO
        try {

            //Instantiate a database object
            $this->_dbh = new PDO(DB_DSN, DB_USERNAME, DB_PASSWORD);
            //echo 'Connected to database!';

        } catch (PDOException $e) {
            echo $e->getMessage();
        }

    }


    /**
     * Writes a user's information to the database when a new user account is created
     * @param $user a User or PremiumUser object
     */
    function writeUser($user)
    {
        //var_dump($user);


        //Write the user's information to the igarage_user table
        //1. Define the query
        $sql = "INSERT INTO igarage_user (user_id, firstName, lastName, username, password, fitness_level)
                VALUES (:user_id, :firstName, :lastName, :username, SHA1(:password), :fitness_level)";

        //2. Prepare the statement
        $statement = $this->_dbh->prepare($sql);

        //3. Bind the parameters

        $null = NULL;

        $statement->bindParam(':user_id', $null);
        $statement->bindParam(':firstName', $user->getFName());
        $statement->bindParam(':lastName', $user->getLName());
        $statement->bindParam(':username', $user->getUserName());
        $statement->bindParam(':password', $user->getPassword());

        if(get_class($user) == 'PremiumUser') {

            $statement->bindParam(':fitness_level', $user->getFitnessLevel());

        } else {

            $statement->bindParam(':fitness_level', $null);

        }

        //4. Execute the statement
        $statement->execute();

        //5. Process the results (get the primary key generated by the insert statement)
        $sql = "SELECT LAST_INSERT_ID()";
        $statement = $this->_dbh->prepare($sql);
        $statement->execute();
        $result = $statement->fetch(PDO::FETCH_ASSOC);

        //Set the user's UserNum to the user_id from the database
        $user->setUserNum($result['LAST_INSERT_ID()']);


        //Write the user's equipment to the equipment_line table if this is a premium user
        if(get_class($user) == 'PremiumUser') {

            //Get the user's equipment
            $equipmentArray = $user->getEquipment();

            //Add each piece of equipment to the equipment_line table with the user's id
            foreach ($equipmentArray as $equipment) {

                //1. Define the query
                $sql = "INSERT INTO equipment_line (user_id, equip_id)
                VALUES (:user_id, :equip_id)";

                //2. Prepare the statement
                $statement = $this->_dbh->prepare($sql);

                //3. Bind the parameters

                //Get the equip_id for each piece of equipment the user has (separate SQL query)
                $innerStmt = $this->_dbh->prepare("SELECT * FROM equipment WHERE equip_name=?");
                $innerStmt->execute([$equipment]);
                $equipID = $innerStmt->fetch();
                $equipID = $equipID['equip_id'];

                $statement->bindParam(':user_id', $user->getUserNum());
                $statement->bindParam(':equip_id', $equipID);


                //4. Execute the statement
                $statement->execute();

            }

            unset($equipment);

        }


    }


    /**
     * Checks to see if a given username exists in the igarage_user table
     * @param $username the username submitted by the user
     * @return bool whether the username exists in the igarage_user table
     */
    function checkUserName($username)
    {
        //Check to see if given username exists in the igarage_user table
        //1. Define the query
        $sql = "SELECT EXISTS(SELECT * FROM igarage_user WHERE username = :username) as 'exists'";

        //2. Prepare the statement
        $statement = $this->_dbh->prepare($sql);

        //3. Bind the parameters

        $statement->bindParam(':username', $username);

        //4. Execute the statement
        $statement->execute();

        //5. Process the results (get the primary key generated by the insert statement)

        $result = $statement->fetch();
        $result = $result['exists'];
        $result = boolval($result);
        return $result;

    }


    /**
     * Checks to see if a given password matches the stored password for the username provided
     * @param $username the username from the user
     * @param $password the password from the user
     * @return bool true if the password matches the saved password for the username, otherwise false
     */
    function checkPassword($username, $password)
    {
        //Check to see if given password matches the stored password for the username provided
        //1. Define the query
        $sql = "SELECT EXISTS(SELECT * FROM igarage_user WHERE username = :username and password = SHA1(:password)) as 'exists'";

        //2. Prepare the statement
        $statement = $this->_dbh->prepare($sql);

        //3. Bind the parameters

        $statement->bindParam(':username', $username);
        $statement->bindParam(':password', $password);

        //4. Execute the statement
        $statement->execute();

        //5. Process the results (get the primary key generated by the insert statement)

        $result = $statement->fetch();
        $result = $result['exists'];
        //echo $result;
        return $result;


    }


    /**
     * Reads a user's information from the database, creates a User or PremiumUser object for the user
     * as appropriate, and stores the object in the session array
     * @param $username the username for the user
     */
    function readUser($username)
    {

    }



}